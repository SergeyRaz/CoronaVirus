{"version":3,"sources":["variables.js","MapCorona.js","App.js","serviceWorker.js","index.js"],"names":["static_data","link_corona_virus","initialViewState","latitude","longitude","zoom","pitch","bearing","MapCorona","props","state","coronaJson","totalDeaths","totalConfirmed","totalCured","axios","get","then","res","coronaData","data","features","item","push","attributes","setState","this","console","log","line","ArcLayer","id","pickable","widthMinPixels","getStrokeWidth","getSourcePosition","getTargetPosition","d","Long_","Lat","getSourceColor","getTargetColor","opacity","scatter","ScatterplotLayer","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","getRadius","Math","sqrt","Confirmed","getFillColor","getLineColor","onClick","info","object","x","y","el","document","getElementById","chartData","datasets","Deaths","Recovered","backgroundColor","borderColor","labels","chartOptions","legend","position","boxWidth","fontColor","title","display","text","fontSize","fontStyle","elements","arc","cutoutPercentage","responsive","Country_Region","ReactDOM","render","options","style","padding","setTooltip","TextLayer","getText","String","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getColor","className","controller","layers","mapStyle","mapboxApiAccessToken","React","Component","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48f7c0e2.chunk.js","sourcesContent":["let link_corona_virus =\r\n  'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=100&cacheHint=true';\r\n\r\nlet static_data = {\r\n  link_corona_virus,\r\n};\r\n\r\nexport default static_data;\r\n","import ReactDOM from 'react-dom';\r\nimport static_data from './variables';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport DeckGL, {ScatterplotLayer} from 'deck.gl';\r\nimport {ArcLayer} from '@deck.gl/layers';\r\nimport {TextLayer} from '@deck.gl/layers';\r\nimport axios from 'axios';\r\nimport {Pie} from 'react-chartjs-2';\r\nimport {layer} from 'deck.gl';\r\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\r\n\r\n// Set your mapbox access token here\r\nconst MAPBOX_ACCESS_TOKEN =\r\n    'pk.eyJ1IjoiYWtvemxvdiIsImEiOiJjazZiMDJheGowZDNiM250aXcyZnZ6YXJyIn0.J5Hj_OvUO9aaD1fk6rzUCg';\r\n\r\n// Initial viewport settings\r\nconst initialViewState = {\r\n    latitude: 26,\r\n    longitude: 29,\r\n    zoom: 2,\r\n    pitch: 0, //30\r\n    bearing: 0,\r\n};\r\n\r\nclass MapCorona extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            coronaJson: null,\r\n            totalDeaths: null,\r\n            totalConfirmed: null,\r\n            totalCured: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(static_data.link_corona_virus)\r\n            .then(res => {\r\n                let coronaData = [];\r\n                for (let item of res.data.features) {\r\n                    coronaData.push(item.attributes);\r\n                }\r\n                this.setState({\r\n                    coronaJson: coronaData,\r\n                });\r\n            })\r\n            .then(res => {\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let data = this.state.coronaJson;\r\n        console.log(data);\r\n        const line = [\r\n            new ArcLayer({\r\n                id: 'great-circle-layer',\r\n                data,\r\n                pickable: false,\r\n                widthMinPixels: 1,\r\n                getStrokeWidth: 12,\r\n                getSourcePosition: [114.3055, 30.5928],\r\n                getTargetPosition: d => [d.Long_, d.Lat],\r\n                getSourceColor: [255, 255, 255],\r\n                getTargetColor: [255, 255, 255],\r\n                opacity: .02,\r\n            }),\r\n        ];\r\n        const scatter = new ScatterplotLayer({\r\n            id: 'scatterplot-layer',\r\n            data,\r\n            pickable: true,\r\n            stroked: true,\r\n            filled: true,\r\n            radiusScale: 30000,\r\n            radiusMinPixels: 15,\r\n            radiusMaxPixels: 50,\r\n            opacity: 1,\r\n            lineWidthMinPixels: 1,\r\n            getPosition: d => [d.Long_, d.Lat],\r\n            getRadius: d => Math.sqrt(d.Confirmed),\r\n            getFillColor: d => [255, 140, 0],\r\n            getLineColor: d => [213, 89, 0],\r\n            onClick: info => setTooltip(info.object, info.x, info.y, this.state),\r\n            // onClick: info => setTooltip(info.object, info.x, info.y, this.state),\r\n        });\r\n        const text = new TextLayer({\r\n            id: 'text-layer',\r\n            data,\r\n            pickable: false,\r\n            getPosition: d => [d.Long_, d.Lat],\r\n            getText: d => String(d.Confirmed),\r\n            getSize: 22,\r\n            getAngle: 0,\r\n            getTextAnchor: 'middle',\r\n            getAlignmentBaseline: 'center',\r\n            getColor: [255, 255, 255]\r\n        });\r\n        console.log(text)\r\n        return (\r\n            <div className={'map-corona'}>\r\n                <div id=\"tooltip\"></div>\r\n                <DeckGL\r\n                    initialViewState={initialViewState}\r\n                    controller={true}\r\n                    layers={[scatter, text, line]}\r\n                >\r\n                    <StaticMap\r\n                        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n                        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    ></StaticMap>\r\n                </DeckGL>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction setTooltip(object, x, y, state) {\r\n    const el = document.getElementById('tooltip');\r\n    if (object) {\r\n        let chartData = {\r\n            datasets: [\r\n                {\r\n                    data: [object.Confirmed, object.Deaths, object.Recovered],\r\n                    backgroundColor: [\r\n                        'rgba(255, 206, 86, 0.5)',\r\n                        'rgba(255, 99, 132, 0.5)',\r\n                        'rgba(11,123,59, 0.5)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 255, 255, 1)',\r\n                        'rgba(255, 255, 255, 1)',\r\n                        'rgba(255, 255, 255, 1)',\r\n                    ],\r\n                },\r\n            ],\r\n            labels: ['Confirmed', 'Deaths', 'Recovered'],\r\n        };\r\n\r\n        let chartOptions = {\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    boxWidth: 20,\r\n                    fontColor: '#fff',\r\n                },\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: '',\r\n                fontColor: '#fff',\r\n                fontSize: 16,\r\n                fontStyle: 'normal',\r\n            },\r\n            elements: {\r\n                arc: {\r\n                    // borderWidth: 18,\r\n                },\r\n            },\r\n            cutoutPercentage: 30,\r\n            responsive: true,\r\n        };\r\n\r\n        chartOptions.title.text = object.Country_Region;\r\n        if (object.Confirmed) {\r\n            chartData.labels[0] = `Confirmed - ${object.Confirmed}`;\r\n        }\r\n        if (object.Deaths) {\r\n            chartData.labels[1] = `Deaths - ${object.Deaths}`;\r\n        }\r\n        if (object.Recovered) {\r\n            chartData.labels[2] = `Cured - ${object.Recovered}`;\r\n        }\r\n\r\n        ReactDOM.render(<Pie data={chartData} options={chartOptions}/>, el);\r\n        el.style.display = 'block';\r\n        el.style.padding = '1rem 1rem 2rem 0'\r\n        // el.style.left = x + 'px';\r\n        // el.style.top = y + 'px';\r\n    } else {\r\n        el.style.display = 'none';\r\n    }\r\n}\r\n\r\nexport default MapCorona;\r\n","import './App.css';\r\nimport React from 'react';\r\nimport {layer} from 'deck.gl';\r\nimport ReactDOM from \"react-dom\";\r\nimport MapCorona from \"./MapCorona\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            coronaJson: null,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={'app'}>\r\n                <MapCorona/>\r\n                <div className={'info'}>\r\n                    <h1>Данные о корона вирусе</h1>\r\n                    <div className=\"info-data\">\r\n                        <h3 className=\"info-data-header\">4 Марта</h3>\r\n                        <div className=\"info-data-info\">\r\n                            <div className=\"info-data-info-event\">11:50: 4 новых случая в Баварии, Германия.</div>\r\n                            <div className=\"info-data-info-event\">11:30: 1 новый случай в Северной территории,\r\n                                Австралия. Это первый случай в Северной территории. Пациент-52-летний турист, который\r\n                                прибыл в Дарвин через Сидней.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">10:58: 10 новых случаев в Бельгии. Девять новых\r\n                                пациентов, недавно вернулись из Италии. Другой пациент имел контакты с зараженным.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">10:48: 586 новых случаев заболевания и 15 новых\r\n                                смертей в Иране.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:50: 1 новый случай в Португалии. Пациент недавно\r\n                                приехал из Италии.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:38: 1 новый случай в Греции. Контакт с более ранним\r\n                                случаем.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:31: 3 новых случая в Австрии.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:28: 2 новых случая в Исландии. Оба пациента недавно\r\n                                приехали из Италии.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:10: 2 новых случая в Беларуси.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">09:05: 37 новых случаев в Германии. (Источник)\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"info-data\">\r\n                        <h3 className=\"info-data-header\">3 Марта</h3>\r\n                        <div className=\"info-data-info\">\r\n                            <div className=\"info-data-info-event\">11:50: 4 новых случая в Баварии, Германия.</div>\r\n                            <div className=\"info-data-info-event\">11:30: 1 новый случай в Северной территории,\r\n                                Австралия. Это первый случай в Северной территории. Пациент-52-летний турист, который\r\n                                прибыл в Дарвин через Сидней.\r\n                            </div>\r\n                            <div className=\"info-data-info-event\">10:58: 10 новых случаев в Бельгии. Девять новых\r\n                                пациентов, недавно вернулись из Италии. Другой пациент имел контакты с зараженным.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}